{"ast":null,"code":"var passport = require('passport');\n\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy(async function (username, password, done) {\n  console.log('authenticate ', username, password);\n  return done(null, {\n    id: 'xxx'\n  });\n}));\npassport.serializeUser(function (user, done) {\n  done(null, user.id);\n});\npassport.deserializeUser(function (id, done) {\n  done(err, {\n    id: 'xxx'\n  });\n}); // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nasync function handler(req, res) {\n  // Run the middleware\n  await runMiddleware(req, res, passport.initialize());\n  await runMiddleware(req, res, passport.session());\n  passport.authenticate('local', (req, res) => {\n    console.log('HELLO', req); // Rest of the API logic\n\n    res.json({\n      message: 'Hello Everyone!'\n    });\n  });\n}\n\nexport default handler;","map":{"version":3,"sources":["/Users/rakrawat/workspace/next-passport/pages/api/login.js"],"names":["passport","require","LocalStrategy","Strategy","use","username","password","done","console","log","id","serializeUser","user","deserializeUser","err","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","handler","initialize","session","authenticate","json","message"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,gBAAD,CAAP,CAA0BE,QAA9C;;AAEAH,QAAQ,CAACI,GAAT,CAAa,IAAIF,aAAJ,CACT,gBAAeG,QAAf,EAAyBC,QAAzB,EAAmCC,IAAnC,EAAyC;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,QAA7B,EAAuCC,QAAvC;AACA,SAAOC,IAAI,CAAC,IAAD,EAAO;AAACG,IAAAA,EAAE,EAAE;AAAL,GAAP,CAAX;AACH,CAJQ,CAAb;AAOAV,QAAQ,CAACW,aAAT,CAAuB,UAASC,IAAT,EAAeL,IAAf,EAAqB;AACxCA,EAAAA,IAAI,CAAC,IAAD,EAAOK,IAAI,CAACF,EAAZ,CAAJ;AACD,CAFH;AAIEV,QAAQ,CAACa,eAAT,CAAyB,UAASH,EAAT,EAAaH,IAAb,EAAmB;AAExCA,EAAAA,IAAI,CAACO,GAAD,EAAM;AAACJ,IAAAA,EAAE,EAAE;AAAL,GAAN,CAAJ;AAEH,CAJD,E,CAQF;AACA;;AACA,SAASK,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACjC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAWK,MAAM,IAAI;AACrB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASD;;AAEH,eAAeE,OAAf,CAAuBR,GAAvB,EAA4BC,GAA5B,EAAiC;AAC7B;AACA,QAAMF,aAAa,CAACC,GAAD,EAAMC,GAAN,EAAWjB,QAAQ,CAACyB,UAAT,EAAX,CAAnB;AACA,QAAMV,aAAa,CAACC,GAAD,EAAMC,GAAN,EAAWjB,QAAQ,CAAC0B,OAAT,EAAX,CAAnB;AAGA1B,EAAAA,QAAQ,CAAC2B,YAAT,CACI,OADJ,EAEI,CAACX,GAAD,EAAMC,GAAN,KAAc;AACVT,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBO,GAArB,EADU,CAEV;;AACAC,IAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAT;AACH,GANL;AASH;;AAED,eAAeL,OAAf","sourcesContent":["var passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy(\n    async function(username, password, done) {\n        console.log('authenticate ', username, password);\n        return done(null, {id: 'xxx'});\n    }\n));\n\npassport.serializeUser(function(user, done) {\n    done(null, user.id);\n  });\n  \n  passport.deserializeUser(function(id, done) {\n\n      done(err, {id: 'xxx'});\n\n  });\n\n\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nfunction runMiddleware(req, res, fn) {\n    return new Promise((resolve, reject) => {\n      fn(req, res, result => {\n        if (result instanceof Error) {\n          return reject(result)\n        }\n  \n        return resolve(result)\n      })\n    })\n  }\n  \nasync function handler(req, res) {\n    // Run the middleware\n    await runMiddleware(req, res, passport.initialize())\n    await runMiddleware(req, res, passport.session())\n  \n\n    passport.authenticate(\n        'local',\n        (req, res) => {\n            console.log('HELLO', req);\n            // Rest of the API logic\n            res.json({ message: 'Hello Everyone!' })\n        }\n    );\n\n}\n  \nexport default handler"]},"metadata":{},"sourceType":"module"}