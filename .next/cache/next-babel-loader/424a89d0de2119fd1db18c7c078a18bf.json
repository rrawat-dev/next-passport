{"ast":null,"code":"import passport from './passport';\nimport cookieSession from 'cookie-session'; // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\nfunction middleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nexport default async function (req, res) {\n  await middleware(req, res, cookieSession({\n    keys: ['aaaa'],\n    secure: false,\n    httpOnly: true\n  }));\n  await middleware(req, res, passport.initialize());\n  await middleware(req, res, passport.session());\n  return {\n    req,\n    res\n  };\n}","map":{"version":3,"sources":["/Users/rakrawat/workspace/next-passport/middlewares/middleware.js"],"names":["passport","cookieSession","middleware","req","res","fn","Promise","resolve","reject","result","Error","keys","secure","httpOnly","initialize","session"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B,C,CAEA;AACA;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,EAA9B,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAWK,MAAM,IAAI;AACrB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASH;;AAGD,eAAe,gBAAiBN,GAAjB,EAAsBC,GAAtB,EAA2B;AACtC,QAAMF,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAWH,aAAa,CAAC;AACrCU,IAAAA,IAAI,EAAE,CAAC,MAAD,CAD+B;AAErCC,IAAAA,MAAM,OAF+B;AAGrCC,IAAAA,QAAQ,EAAE;AAH2B,GAAD,CAAxB,CAAhB;AAMA,QAAMX,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAWJ,QAAQ,CAACc,UAAT,EAAX,CAAhB;AACA,QAAMZ,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAWJ,QAAQ,CAACe,OAAT,EAAX,CAAhB;AAEA,SAAO;AACHZ,IAAAA,GADG;AAEHC,IAAAA;AAFG,GAAP;AAIH","sourcesContent":["import passport from './passport';\nimport cookieSession from 'cookie-session'\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nfunction middleware(req, res, fn) {\n    return new Promise((resolve, reject) => {\n      fn(req, res, result => {\n        if (result instanceof Error) {\n          return reject(result)\n        }\n  \n        return resolve(result)\n      })\n    })\n}\n\n\nexport default async function  (req, res) {\n    await middleware(req, res, cookieSession({\n        keys: ['aaaa'],\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true\n    }))\n\n    await middleware(req, res, passport.initialize())\n    await middleware(req, res, passport.session())\n\n    return {\n        req, \n        res\n    }\n}"]},"metadata":{},"sourceType":"module"}