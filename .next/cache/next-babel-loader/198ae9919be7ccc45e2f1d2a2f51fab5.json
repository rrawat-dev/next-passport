{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport passport from './passport';\nimport cookieSession from 'cookie-session'; // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\nfunction middleware(req, res, fn) {\n  return new Promise(function (resolve, reject) {\n    fn(req, res, function (result) {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n}\n\nexport default function _callee(req, res) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(middleware(req, res, cookieSession({\n            session: 'sid',\n            keys: ['aaaa'],\n            //secure: process.env.NODE_ENV === 'production',\n            httpOnly: true\n          })));\n\n        case 2:\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(middleware(req, res, passport.initialize()));\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(middleware(req, res, passport.session()));\n\n        case 6:\n          return _context.abrupt(\"return\", {\n            req: req,\n            res: res\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/rakrawat/workspace/next-passport/middlewares/middleware.js"],"names":["passport","cookieSession","middleware","req","res","fn","Promise","resolve","reject","result","Error","session","keys","httpOnly","initialize"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,aAAP,MAA0B,gBAA1B,C,CAEA;AACA;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,EAA9B,EAAkC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAW,UAAAK,MAAM,EAAI;AACrB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC3B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACD;;AAED,aAAOF,OAAO,CAACE,MAAD,CAAd;AACD,KANC,CAAF;AAOD,GARM,CAAP;AASH;;AAGD,eAAe,iBAAiBN,GAAjB,EAAsBC,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACLF,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAWH,aAAa,CAAC;AACrCU,YAAAA,OAAO,EAAE,KAD4B;AAErCC,YAAAA,IAAI,EAAE,CAAC,MAAD,CAF+B;AAGrC;AACAC,YAAAA,QAAQ,EAAE;AAJ2B,WAAD,CAAxB,CADL;;AAAA;AAAA;AAAA,2CAQLX,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAWJ,QAAQ,CAACc,UAAT,EAAX,CARL;;AAAA;AAAA;AAAA,2CASLZ,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAWJ,QAAQ,CAACW,OAAT,EAAX,CATL;;AAAA;AAAA,2CAWJ;AACHR,YAAAA,GAAG,EAAHA,GADG;AAEHC,YAAAA,GAAG,EAAHA;AAFG,WAXI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import passport from './passport';\nimport cookieSession from 'cookie-session'\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nfunction middleware(req, res, fn) {\n    return new Promise((resolve, reject) => {\n      fn(req, res, result => {\n        if (result instanceof Error) {\n          return reject(result)\n        }\n  \n        return resolve(result)\n      })\n    })\n}\n\n\nexport default async function  (req, res) {\n    await middleware(req, res, cookieSession({\n        session: 'sid',\n        keys: ['aaaa'],\n        //secure: process.env.NODE_ENV === 'production',\n        httpOnly: true\n    }))\n\n    await middleware(req, res, passport.initialize())\n    await middleware(req, res, passport.session())\n\n    return {\n        req, \n        res\n    }\n}"]},"metadata":{},"sourceType":"module"}